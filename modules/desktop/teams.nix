{ config, pkgs, ... }:

{
  # Define the configuration for this module inside the 'config' attribute set.
  config = let
    # Define your custom variable inside a 'let' block within the 'config' section.
    # This makes it a local variable that can be used later in the same block.
    teams-for-linux-pywal-wrapper = pkgs.writeShellScriptBin "teams-for-linux" ''
      pywal_json="$HOME/.cache/wal/colors.json"
      custom_css="$HOME/.config/teams-for-linux/custom-wal.css"
      
      mkdir -p "$(dirname "$custom_css")"
      
      if [ -f "$pywal_json" ]; then
        ${pkgs.jq}/bin/jq -r '
          "/* Generated by NixOS pywal-teams-theme-wrapper */\n
          :root {\n
            --background-color: \(.special.background);\n
            --foreground-color: \(.special.foreground);\n
            --color0: \(.colors.color0);\n
            --color1: \(.colors.color1);\n
            --color2: \(.colors.color2);\n
            --color3: \(.colors.color3);\n
            --color4: \(.colors.color4);\n
            --color5: \(.colors.color5);\n
            --color6: \(.colors.color6);\n
            --color7: \(.colors.color7);\n
            --color8: \(.colors.colors8);\n
            --color9: \(.colors.colors9);\n
            --color10: \(.colors.colors10);\n
            --color11: \(.colors.colors11);\n
            --color12: \(.colors.colors12);\n
            --color13: \(.colors.colors13);\n
            --color14: \(.colors.colors14);\n
            --color15: \(.colors.colors15);\n
          }\n
          body {\n
            background-color: var(--background-color);\n
            color: var(--foreground-color);\n
          }\n"
        ' "$pywal_json" > "$custom_css"
      fi
      
      exec ${pkgs.teams-for-linux}/bin/teams-for-linux \
        --enable-features=UseOzonePlatform,WaylandWindowDecorations \
        --ozone-platform=wayland \
        --user-data-dir="$HOME/.config/teams-for-linux"
    '';
  in
  {
    # We use the 'in' keyword to define what our 'config' actually is.
    # In this case, we're modifying the systemPackages list.
    environment.systemPackages = with pkgs; [
      teams-for-linux-pywal-wrapper
      jq
    ];
  };
}


#{ config, pkgs, lib, ... }:


  # Define a custom wrapper script for teams-for-linux that applies the pywal theme.
 # teams-for-linux-pywal-wrapper = pkgs.writeShellScriptBin "teams-for-linux" ''
    # The script will use `jq` to parse the pywal colors and generate a CSS file.
    # It will then launch teams-for-linux using this custom theme.

    # Location of the pywal colors file.
  #  pywal_json="$HOME/.cache/wal/colors.json"
    
    # Location for the generated custom CSS file.
    # We use a hidden directory to keep it organized.
   # custom_css="$HOME/.config/teams-for-linux/custom-wal.css"

    # Ensure the directory exists.
    #mkdir -p "$(dirname "$custom_css")"

    # Check if the pywal colors file exists before proceeding.
    #if [ -f "$pywal_json" ]; then
        # Use jq to read the colors and create the CSS content.
        # This will theme the background and text colors of the application's UI.
#         ${pkgs.jq}/bin/jq -r '
#           "/* Generated by NixOS pywal-teams-theme-wrapper */\n
#           :root {\n
#             --background-color: \(.special.background);\n
#             --foreground-color: \(.special.foreground);\n
#             --color0: \(.colors.color0);\n
#             --color1: \(.colors.color1);\n
#             --color2: \(.colors.color2);\n
#             --color3: \(.colors.color3);\n
#             --color4: \(.colors.color4);\n
#             --color5: \(.colors.color5);\n
#             --color6: \(.colors.color6);\n
#             --color7: \(.colors.color7);\n
#             --color8: \(.colors.color8);\n
#             --color9: \(.colors.color9);\n
#             --color10: \(.colors.color10);\n
#             --color11: \(.colors.color11);\n
#             --color12: \(.colors.color12);\n
#             --color13: \(.colors.color13);\n
#             --color14: \(.colors.color14);\n
#             --color15: \(.colors.color15);\n
#           }\n
#           body {\n
#             background-color: var(--background-color);\n
#             color: var(--foreground-color);\n
#           }\n"
#         ' "$pywal_json" > "$custom_css"
#     fi
# 
#     # Execute the original teams-for-linux application with the custom flags.
#     # We use the `--user-data-dir` to point to a custom directory where the CSS will be loaded.
#     exec ${pkgs.teams-for-linux}/bin/teams-for-linux \
#       --enable-features=UseOzonePlatform,WaylandWindowDecorations \
#       --ozone-platform=wayland \
#       --user-data-dir="$HOME/.config/teams-for-linux"
#   '';
# 
# in
#  
# {
# 
#   # Set the crucial environment variable to enable Wayland for Electron apps.
#   # This tells Electron to use the Wayland-native backend (Ozone).
#   environment.sessionVariables = {
#     NIXOS_OZONE_WL = "1";
#   };
# 
#   # Enable the X11 windowing system to ensure XWayland is available for
#   # applications that don't yet support Wayland natively.
#   services.xserver.enable = true;
# 
#   # Ensure the Intel video drivers are enabled.
#   services.xserver.videoDrivers = [ "intel" ];
# 
#   # Enable OpenGL for graphics acceleration.
#   hardware.opengl.enable = true;
#   environment.systemPackages = with pkgs; [
#   			    teams-for-linux-pywal-wrapper
# 			    jq
# 	];
# 
#   
# }
